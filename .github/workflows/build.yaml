name: Customize and Deploy Application in High Availability Server

permissions: 
  id-token: write
  contents: read

on:
  push: 
    branches:
      - main

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: 
        aws-region: us-west-2
        role-to-assume: arn:aws:iam::748575089860:role/github-new-role
        role-session-name: BuildSession

    - name: Install unzip, AWS CLI, Ansible, and Terraform
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip awscli gnupg software-properties-common
        wget -O- https://apt.releases.hashicorp.com/gpg | \
          gpg --dearmor | \
          sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
          https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
          sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt-get update
        sudo apt-get install terraform -y
        pip install ansible

    - name: Generate SSH Key Pair and Launch EC2 instances
      run: |
        echo "[cpu-api]" > inventory
        ssh-keygen -t rsa -b 4096 -f id_rsa -N ""
        terraform init
        terraform apply --auto-approve 
      working-directory: tempec2
      continue-on-error: true
    
    - name: Ansible Playbook
      run: |
        sleep 30
        chmod 400 id_rsa
        ansible-playbook -i inventory --private-key id_rsa install-app.yml
      working-directory: tempec2
      continue-on-error: true

    - name: Retrieve Instance ID
      id: get_instance_id
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=amimaker" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
      continue-on-error: true

    - name: Create AMI
      id: create_ami
      run: |
        OUTPUT=$(aws ec2 create-image \
          --instance-id ${{ env.INSTANCE_ID }} \
          --name "MyNewAMI-${{ github.run_number }}" \
          --no-reboot)
        AMI_ID=$(echo $OUTPUT | jq -r '.ImageId')
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      continue-on-error: true
      
    - name: Wait for AMI to be available
      id: wait_for_ami
      run: |
        AMI_ID=${{ env.AMI_ID }}
        echo "Waiting for AMI $AMI_ID to be available..."
        STATUS="pending"
        while [ "$STATUS" != "available" ]; do
          STATUS=$(aws ec2 describe-images \
            --image-ids $AMI_ID \
            --query "Images[0].State" \
            --output text)
          echo "Current status: $STATUS"
          if [ "$STATUS" == "available" ]; then
            echo "AMI $AMI_ID is available."
            break
          fi
          sleep 30  # Wait for 30 seconds before checking again
        done
      continue-on-error: true
      
    - name: Output AMI ID
      run: echo "AMI ID is ${{ env.AMI_ID }}"
      continue-on-error: true

    - name: Terraform destroy
      run: |
        terraform destroy --auto-approve
      working-directory: tempec2
      continue-on-error: true

    - name: Terraform Update the infrastructure
      run: |
        echo "$MY_PUB_KEY" > mykey.pub
        terraform init
        terraform apply -var="ami-id=${{ env.AMI_ID }}" --auto-approve
      working-directory: terraform
      continue-on-error: true
      env:
          MY_PUB_KEY: ${{ secrets.MY_PUB_KEY }}


    - name: Terraform Destroy on Failure
      if: always()
      run: terraform destroy --auto-approve
      working-directory: terraform

 
