- name: Install cpu API on server
  hosts: cpu-api
  remote_user: ubuntu
  become: true

  vars:
    app_dir: /home/ubuntu/high-availablity
    venv_dir: /home/ubuntu/flaskenv
    gunicorn_config: /gunicorn.py
    service_name: myflaskapp
    user: ubuntu
    group: ubuntu

  tasks:
    - name: Update package lists (on Debian/Ubuntu)
      apt:
        update_cache: yes

    - name: Install Python3, pip, and venv
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: latest
        update_cache: yes

    - name: Manually create the initial virtualenv
      command:
        cmd: python3 -m venv "{{ venv_dir }}"
        creates: "{{ venv_dir }}"

    - name: Clone a GitHub repository
      git:
        repo: https://github.com/roeeelnekave/high-availablity.git
        dest: "{{ app_dir }}"
        clone: yes
        update: yes

    - name: Install requirements inside the virtual environment
      command: "{{ venv_dir }}/bin/pip install -r {{ app_dir }}/requirements.txt"
      become: true

    - name: Ensure application directory exists
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ user }}"
        group: "{{ group }}"

    - name: Ensure virtual environment directory exists
      file:
        path: "{{ venv_dir }}"
        state: directory
        owner: "{{ user }}"
        group: "{{ group }}"

    - name: Create systemd service file
      copy:
        dest: /etc/systemd/system/{{ service_name }}.service
        content: |
          [Unit]
          Description=Gunicorn instance to serve myflaskapp
          After=network.target

          [Service]
          User={{ user }}
          Group={{ group }}
          WorkingDirectory={{ app_dir }}
          ExecStart={{ venv_dir }}/bin/gunicorn -c {{ app_dir }}{{ gunicorn_config }} app:app

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Reload systemd to pick up the new service
      systemd:
        daemon_reload: yes

    - name: Start and enable the Flask app service
      systemd:
        name: "{{ service_name }}"
        state: started
        enabled: yes

    # - name: Check status of the Flask app service
    #   command: systemctl status {{ service_name }}
    #   register: service_status
    #   ignore_errors: yes

    # - name: Display service status
    #   debug:
    #     msg: "{{ service_status.stdout_lines }}"


 
